var q=Object.defineProperty;var k=(a,e,t)=>e in a?q(a,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):a[e]=t;var r=(a,e,t)=>k(a,typeof e!="symbol"?e+"":e,t);(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))n(s);new MutationObserver(s=>{for(const o of s)if(o.type==="childList")for(const i of o.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&n(i)}).observe(document,{childList:!0,subtree:!0});function t(s){const o={};return s.integrity&&(o.integrity=s.integrity),s.referrerPolicy&&(o.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?o.credentials="include":s.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function n(s){if(s.ep)return;s.ep=!0;const o=t(s);fetch(s.href,o)}})();const T=window.AudioContext||window.webkitAudioContext;class I{constructor(){r(this,"context");r(this,"oscillator",null);r(this,"gainNode",null);r(this,"filter",null);this.context=new(window.AudioContext||window.webkitAudioContext),this.context.suspend()}ensureContext(){this.context.state==="suspended"&&this.context.resume()}async playSound(e){if(this.ensureContext(),this.stopSound(),this.oscillator=this.context.createOscillator(),this.filter=this.context.createBiquadFilter(),this.gainNode=this.context.createGain(),this.oscillator.type=e.type,this.oscillator.frequency.setValueAtTime(e.frequency,this.context.currentTime),this.filter.type=e.filter.type,this.filter.frequency.setValueAtTime(e.filter.frequency,this.context.currentTime),this.filter.Q.setValueAtTime(e.filter.Q,this.context.currentTime),e.modulation>0){const t=this.context.createOscillator(),n=this.context.createGain();t.frequency.value=e.modSpeed,n.gain.value=e.modulation,t.connect(n),n.connect(this.oscillator.frequency),t.start()}return this.gainNode.gain.setValueAtTime(0,this.context.currentTime),this.gainNode.gain.linearRampToValueAtTime(1,this.context.currentTime+e.attack),this.gainNode.gain.exponentialRampToValueAtTime(.001,this.context.currentTime+e.duration),this.oscillator.connect(this.filter),this.filter.connect(this.gainNode),this.gainNode.connect(this.context.destination),this.oscillator.start(),this.oscillator.stop(this.context.currentTime+e.duration),new Promise(t=>{setTimeout(t,e.duration*1e3)})}stopSound(){var e;(e=this.oscillator)==null||e.stop(),this.oscillator=null,this.filter=null,this.gainNode=null}async exportSound(e){const t=this.context.sampleRate,n=e.duration;new OfflineAudioContext(2,t*n,t);const s=new T,o=s.createOscillator(),i=s.createBiquadFilter(),c=s.createGain();if(o.type=e.type,o.frequency.setValueAtTime(e.frequency,0),i.type=e.filter.type,i.frequency.setValueAtTime(e.filter.frequency,0),i.Q.setValueAtTime(e.filter.Q,0),e.modulation>0){const d=s.createOscillator(),p=s.createGain();d.frequency.value=e.modSpeed,p.gain.value=e.modulation,d.connect(p),p.connect(o.frequency),d.start()}c.gain.setValueAtTime(0,0),c.gain.linearRampToValueAtTime(1,e.attack),c.gain.exponentialRampToValueAtTime(.001,e.duration),o.connect(i),i.connect(c),c.connect(s.destination);const h=s.createMediaStreamDestination();c.connect(h);const u=new MediaRecorder(h.stream),l=[];return u.ondataavailable=d=>l.push(d.data),o.start(),u.start(),new Promise(d=>{u.onstop=()=>{const p=new Blob(l,{type:"audio/wav"});s.close(),d(p)},setTimeout(()=>{u.stop(),o.stop()},n*1e3)})}audioBufferToWav(e){const t=e.numberOfChannels,n=e.sampleRate,s=1,o=16,i=o/8,c=t*i,h=e.getChannelData(0),u=new Int16Array(h.length);for(let p=0;p<h.length;p++){const g=Math.max(-1,Math.min(1,h[p]));u[p]=g<0?g*32768:g*32767}const l=new ArrayBuffer(44),d=new DataView(l);return C(d,0,"RIFF"),d.setUint32(4,36+u.length*2,!0),C(d,8,"WAVE"),C(d,12,"fmt "),d.setUint32(16,16,!0),d.setUint16(20,s,!0),d.setUint16(22,t,!0),d.setUint32(24,n,!0),d.setUint32(28,n*c,!0),d.setUint16(32,c,!0),d.setUint16(34,o,!0),C(d,36,"data"),d.setUint32(40,u.length*2,!0),new Blob([l,u.buffer],{type:"audio/wav"})}}function C(a,e,t){for(let n=0;n<t.length;n++)a.setUint8(e+n,t.charCodeAt(n))}let E;const M=new Uint8Array(16);function N(){if(!E&&(E=typeof crypto<"u"&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!E))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return E(M)}const m=[];for(let a=0;a<256;++a)m.push((a+256).toString(16).slice(1));function U(a,e=0){return m[a[e+0]]+m[a[e+1]]+m[a[e+2]]+m[a[e+3]]+"-"+m[a[e+4]]+m[a[e+5]]+"-"+m[a[e+6]]+m[a[e+7]]+"-"+m[a[e+8]]+m[a[e+9]]+"-"+m[a[e+10]]+m[a[e+11]]+m[a[e+12]]+m[a[e+13]]+m[a[e+14]]+m[a[e+15]]}const A=typeof crypto<"u"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto),b={randomUUID:A};function w(a,e,t){if(b.randomUUID&&!e&&!a)return b.randomUUID();a=a||{};const n=a.random||(a.rng||N)();return n[6]=n[6]&15|64,n[8]=n[8]&63|128,U(n)}class P{constructor(){r(this,"sounds",new Map);r(this,"order",[]);this.loadFromLocalStorage()}loadFromLocalStorage(){const e=localStorage.getItem("sounds"),t=localStorage.getItem("soundOrder");if(e){const n=JSON.parse(e);this.sounds=new Map(Object.entries(n)),t?this.order=JSON.parse(t):this.order=Array.from(this.sounds.keys())}}saveToLocalStorage(){const e=Object.fromEntries(this.sounds);localStorage.setItem("sounds",JSON.stringify(e)),localStorage.setItem("soundOrder",JSON.stringify(this.order))}createSound(e){const t={id:w(),name:e,type:"sine",frequency:440,duration:.5,attack:.01,decay:.1,modulation:0,modSpeed:0,filter:{type:"lowpass",frequency:1e3,Q:1}};return this.sounds.set(t.id,t),this.order.push(t.id),this.saveToLocalStorage(),t}cloneSound(e,t){const n=this.sounds.get(e);if(!n)throw new Error("Sound not found");const s={...n,id:w(),name:t};return this.sounds.set(s.id,s),this.order.push(s.id),this.saveToLocalStorage(),s}updateSound(e){this.sounds.set(e.id,e),this.saveToLocalStorage()}deleteSound(e){this.sounds.delete(e),this.order=this.order.filter(t=>t!==e),this.saveToLocalStorage()}reorderSounds(e,t){const[n]=this.order.splice(e,1);this.order.splice(t,0,n),this.saveToLocalStorage()}getAllSounds(){return this.order.map(e=>this.sounds.get(e))}getSound(e){return this.sounds.get(e)}clearAll(){this.sounds.clear(),this.order=[],this.saveToLocalStorage()}importSound(e){this.sounds.set(e.id,e),this.order.push(e.id),this.saveToLocalStorage()}}class v{static yToFreq(e,t){const s=(t-e)/12;return 20*Math.pow(2,s)}static freqToY(e,t){return t-12*Math.log2(e/20)}static snapToNote(e){const n=12*Math.log2(e/440)+69,s=Math.round(n);return 440*Math.pow(2,(s-69)/12)}static xToTime(e,t){return(e+1)/t*2}static getNoteFrequency(e){return 440*Math.pow(2,(e-69)/12)}}class O{constructor(e,t,n,s,o){r(this,"element");r(this,"x");r(this,"y");r(this,"gridSize");r(this,"sound");r(this,"onUpdate");this.x=e,this.y=t,this.gridSize=n,this.sound=s,this.onUpdate=o,this.element=this.createCell()}createCell(){const e=document.createElement("div");e.className="grid-cell";const t=v.yToFreq(this.y,this.gridSize),n=v.xToTime(this.x,this.gridSize);return e.style.backgroundColor=this.getCellColor(t,n),e.addEventListener("mousedown",()=>this.handleCellClick(t,n)),e}getCellColor(e,t){const n=Math.abs(this.sound.frequency/e),s=n>.99&&n<1.01,o=Math.abs(this.sound.duration-t)<.1;return s&&o?"#00ffff":s?"rgba(0, 255, 255, 0.2)":o?"rgba(0, 255, 255, 0.1)":"#2a2a2a"}handleCellClick(e,t){this.sound.frequency=e,this.sound.duration=t,this.onUpdate(this.sound)}getElement(){return this.element}update(e){this.sound=e;const t=v.yToFreq(this.y,this.gridSize),n=v.xToTime(this.x,this.gridSize);this.element.style.backgroundColor=this.getCellColor(t,n)}}class D{constructor(e,t,n){r(this,"container");r(this,"gridSize");r(this,"cells",[]);r(this,"currentSound",null);r(this,"onSoundUpdate");this.container=e,this.gridSize=t,this.onSoundUpdate=n}updateSound(e){this.currentSound=e,this.render()}render(){if(this.container.innerHTML="",this.cells=[],!this.currentSound){this.container.innerHTML='<div class="no-sound">Select or create a sound</div>';return}for(let e=0;e<this.gridSize;e++){this.cells[e]=[];for(let t=0;t<this.gridSize;t++){const n=new O(t,e,this.gridSize,this.currentSound,this.onSoundUpdate);this.cells[e][t]=n,this.container.appendChild(n.getElement())}}}updateGrid(){var e;if(this.currentSound)for(let t=0;t<this.gridSize;t++)for(let n=0;n<this.gridSize;n++)(e=this.cells[t][n])==null||e.update(this.currentSound)}}class R{constructor(e,t,n){r(this,"span");r(this,"sound");r(this,"onUpdate");this.span=e,this.sound=t,this.onUpdate=n,this.initialize()}initialize(){this.span.addEventListener("dblclick",()=>{const e=document.createElement("input");e.type="text",e.value=this.sound.name,e.className="name-edit";const t=()=>{const n=e.value.trim();n&&(this.sound.name=n,this.onUpdate(this.sound)),this.span.textContent=this.sound.name};e.addEventListener("blur",t),e.addEventListener("keyup",n=>{n.key==="Enter"?t():n.key==="Escape"&&(this.span.textContent=this.sound.name)}),this.span.textContent="",this.span.appendChild(e),e.focus(),e.select()})}}const L=class L{static getScaleFrequencies(e,t){return L.SCALE_TYPES[t].map(s=>e*Math.pow(2,s/12))}static getNoteName(e){const t=["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"],s=440*Math.pow(2,-4.75),o=Math.round(12*Math.log2(e/s)),i=Math.floor(o/12),c=o%12;return`${t[c]}${i}`}};r(L,"SCALE_TYPES",{major:[0,2,4,5,7,9,11,12,14],minor:[0,2,3,5,7,8,10,12,14],pentatonic:[0,2,4,7,9,12,14,16,19],chromatic:[0,1,2,3,4,5,6,7,8],blues:[0,3,5,6,7,10,12,15,17],lemurian:[0,2,4,6,8,10,12,14,16],egyptian:[0,2,5,7,10,12,14,17,19],indian_bhairav:[0,1,4,5,7,8,11,12,13],chinese:[0,2,4,7,9,12,14,16,19]});let y=L;class V{constructor(e,t,n){r(this,"modal");r(this,"baseSound");r(this,"onApply");r(this,"store");this.baseSound=e,this.store=t,this.onApply=n,this.modal=this.createModal(),document.body.appendChild(this.modal)}createModal(){const e=document.createElement("div");return e.className="scale-modal",e.innerHTML=`
      <div class="scale-modal-content">
        <h2>Create Scale from "${this.baseSound.name}"</h2>
        <div class="scale-controls">
          <div class="control">
            <label>Scale Type:</label>
            <select class="scale-type">
              ${Object.keys(y.SCALE_TYPES).map(t=>`<option value="${t}">${t.charAt(0).toUpperCase()+t.slice(1)}</option>`).join("")}
            </select>
          </div>
          <div class="preview-notes"></div>
        </div>
        <div class="modal-actions">
          <button class="cancel">Cancel</button>
          <button class="apply">Apply to Drum Pad</button>
        </div>
      </div>
    `,this.setupListeners(e),this.updatePreview(e,"major"),e}updatePreview(e,t){const n=y.getScaleFrequencies(this.baseSound.frequency,t),s=e.querySelector(".preview-notes");s.innerHTML=n.map(o=>`<div class="note-preview">
        <span class="note-name">${y.getNoteName(o)}</span>
        <span class="frequency">${Math.round(o)} Hz</span>
      </div>`).join("")}setupListeners(e){var n,s;const t=e.querySelector(".scale-type");t.addEventListener("change",()=>{this.updatePreview(e,t.value)}),(n=e.querySelector(".cancel"))==null||n.addEventListener("click",()=>{this.close()}),(s=e.querySelector(".apply"))==null||s.addEventListener("click",()=>{const o=t.value,i=y.getScaleFrequencies(this.baseSound.frequency,o),c=i.map(u=>{const l=y.getNoteName(u),d=this.store.cloneSound(this.baseSound.id,`${this.baseSound.name} ${l}`);return d.frequency=u,this.store.updateSound(d),d}),h=JSON.parse(localStorage.getItem("drumPadMappings")||"[]");for(;h.length<9;)h.push({key:"",soundId:""});c.forEach((u,l)=>{l<h.length&&(h[l]={key:h[l].key||"",soundId:u.id})}),localStorage.setItem("drumPadMappings",JSON.stringify(h)),this.onApply(i),this.close(),setTimeout(()=>{window.dispatchEvent(new CustomEvent("drumpad-update"))},50)})}close(){this.modal.remove()}}class F{constructor(e,t,{onSelect:n,onDelete:s,onCreate:o,onPlay:i,onClone:c,onUpdate:h,onReorder:u,onExportConfig:l,onImportConfig:d}){r(this,"container");r(this,"store");r(this,"onSelect");r(this,"onDelete");r(this,"onCreate");r(this,"onPlay");r(this,"onClone");r(this,"onUpdate");r(this,"onReorder");r(this,"currentSound",null);r(this,"draggedItem",null);r(this,"draggedIndex",-1);r(this,"onExportConfig");r(this,"onImportConfig");this.container=e,this.store=t,this.onSelect=n,this.onDelete=s,this.onCreate=o,this.onPlay=i,this.onClone=c,this.onUpdate=h,this.onReorder=u,this.onExportConfig=l,this.onImportConfig=d,this.initialize()}initialize(){var n,s,o;this.container.innerHTML=`
      <div class="list-header">
        <h2>Sounds</h2>
        <div class="sound-actions">
          <button class="new-sound" title="New Sound">+</button>
          <button class="export-config" title="Save Config">⬇</button>
          <button class="import-config" title="Load Config">⬆</button>
        </div>
      </div>
      <div class="sound-items"></div>
    `;const e=this.container.querySelector(".list-header");(n=e.querySelector(".new-sound"))==null||n.addEventListener("click",()=>{this.onCreate()}),(s=e.querySelector(".export-config"))==null||s.addEventListener("click",()=>{var i;(i=this.onExportConfig)==null||i.call(this)});const t=document.createElement("input");t.type="file",t.accept=".json",t.style.display="none",e.appendChild(t),(o=e.querySelector(".import-config"))==null||o.addEventListener("click",()=>{t.click()}),t.addEventListener("change",i=>{var h,u;const c=(h=i.target.files)==null?void 0:h[0];c&&((u=this.onImportConfig)==null||u.call(this,c)),t.value=""})}updateList(e,t){this.currentSound=t;const n=this.container.querySelector(".sound-items");n.innerHTML="",e.forEach((s,o)=>{var h,u,l,d,p,g;const i=document.createElement("div");i.className="sound-item",i.draggable=!0,((h=this.currentSound)==null?void 0:h.id)===s.id&&i.classList.add("selected"),i.dataset.soundId=s.id,i.addEventListener("dragstart",S=>{var f;(f=S.dataTransfer)==null||f.setData("application/json",JSON.stringify({type:"sound",soundId:s.id,soundName:s.name})),i.classList.add("dragging")}),i.addEventListener("dragend",()=>{i.classList.remove("dragging")}),i.innerHTML=`
        <span class="drag-handle">⋮⋮</span>
        <span class="sound-name">${s.name}</span>
        <button class="edit" title="Edit name">✎</button>
        <button class="play" title="Play">▶</button>
        <button class="create-scale" title="Create Scale">♪</button>
        <button class="clone" title="Clone">⎘</button>
        <button class="delete" title="Delete">×</button>
      `;const c=i.querySelector(".sound-name");new R(c,s,this.onUpdate),this.setupDragListeners(i,o),i.addEventListener("click",()=>this.onSelect(s)),(u=i.querySelector(".edit"))==null||u.addEventListener("click",S=>{S.stopPropagation(),c.dispatchEvent(new MouseEvent("dblclick"))}),(l=i.querySelector(".play"))==null||l.addEventListener("click",S=>{S.stopPropagation(),this.onPlay(s)}),(d=i.querySelector(".clone"))==null||d.addEventListener("click",S=>{S.stopPropagation();const f=prompt("Enter name for cloned sound:",`${s.name} (copy)`);f&&this.onClone(s.id,f)}),(p=i.querySelector(".delete"))==null||p.addEventListener("click",S=>{S.stopPropagation(),confirm("Are you sure you want to delete this sound?")&&this.onDelete(s.id)}),(g=i.querySelector(".create-scale"))==null||g.addEventListener("click",S=>{S.stopPropagation(),this.handleCreateScale(s)}),n.appendChild(i)})}setupDragListeners(e,t){e.addEventListener("dragstart",n=>{var s;this.draggedItem=e,this.draggedIndex=t,e.classList.add("dragging"),(s=n.dataTransfer)==null||s.setData("text/plain","")}),e.addEventListener("dragend",()=>{this.draggedItem&&(this.draggedItem.classList.remove("dragging"),this.draggedItem=null,this.draggedIndex=-1)}),e.addEventListener("dragover",n=>{if(n.preventDefault(),!this.draggedItem||this.draggedItem===e)return;const s=e.getBoundingClientRect(),o=s.top+s.height/2;n.clientY<o?(e.classList.add("drag-above"),e.classList.remove("drag-below")):(e.classList.add("drag-below"),e.classList.remove("drag-above"))}),e.addEventListener("dragleave",()=>{e.classList.remove("drag-above","drag-below")}),e.addEventListener("drop",n=>{if(n.preventDefault(),!this.draggedItem||this.draggedItem===e)return;const s=e.getBoundingClientRect(),o=s.top+s.height/2,i=n.clientY,c=t+(i>=o?1:0),h=c>this.draggedIndex?c-1:c;this.onReorder(this.draggedIndex,h),e.classList.remove("drag-above","drag-below")})}handleCreateScale(e){new V(e,this.store,t=>{this.updateList(this.store.getAllSounds(),this.currentSound)})}}class ${constructor(e,t,n,s,o,i){r(this,"element");r(this,"input");r(this,"currentValue");r(this,"min");r(this,"max");r(this,"step");r(this,"onChange");this.currentValue=t,this.min=n,this.max=s,this.step=o,this.onChange=i,this.element=document.createElement("span"),this.element.className="value editable",this.element.textContent=this.formatValue(t),this.input=document.createElement("input"),this.input.type="number",this.input.className="value-edit",this.input.min=String(n),this.input.max=String(s),this.input.step=String(o),e.appendChild(this.element),this.setupListeners()}formatValue(e){return this.step>=1?e.toFixed(0):e.toFixed(2)}setupListeners(){this.element.addEventListener("click",()=>{this.input.value=String(this.currentValue),this.element.replaceWith(this.input),this.input.focus(),this.input.select()}),this.input.addEventListener("blur",()=>this.commitEdit()),this.input.addEventListener("keydown",e=>{e.key==="Enter"?this.commitEdit():e.key==="Escape"&&this.input.replaceWith(this.element)})}commitEdit(){const e=Math.min(this.max,Math.max(this.min,Number(this.input.value)));!isNaN(e)&&e!==this.currentValue&&(this.currentValue=e,this.onChange(e)),this.element.textContent=this.formatValue(this.currentValue),this.input.replaceWith(this.element)}update(e){this.currentValue=e,this.element.textContent=this.formatValue(e)}}class j{constructor(e,t){r(this,"container");r(this,"onUpdate");r(this,"currentSound",null);this.container=e,this.onUpdate=t,this.render()}updateSound(e){this.currentSound=e,this.render()}render(){if(!this.container)return;if(!this.currentSound){this.container.innerHTML='<div class="no-sound">Select or create a sound</div>';return}const e=document.createElement("div");e.className="controls-grid",this.renderOscillatorGroup(e),this.renderEnvelopeGroup(e),this.renderModulationGroup(e),this.renderFilterGroup(e),this.container.innerHTML="",this.container.appendChild(e)}renderOscillatorGroup(e){const t=this.createControlGroup("Oscillator");this.renderTypeSelect(t),this.renderControl(t,"Frequency (Hz)",this.currentSound.frequency,20,2e4,.01,s=>{this.currentSound.frequency=s,this.onUpdate(this.currentSound)});const n=document.createElement("button");n.className="snap-note",n.textContent="♪ Snap to Note",n.addEventListener("click",()=>{this.currentSound&&(this.currentSound.frequency=v.snapToNote(this.currentSound.frequency),this.onUpdate(this.currentSound))}),t.appendChild(n),e.appendChild(t)}renderEnvelopeGroup(e){const t=this.createControlGroup("Envelope");this.renderControl(t,"Duration (s)",this.currentSound.duration,.1,2,.1,n=>{this.currentSound.duration=n,this.onUpdate(this.currentSound)}),this.renderControl(t,"Attack (s)",this.currentSound.attack,0,.5,.01,n=>{this.currentSound.attack=n,this.onUpdate(this.currentSound)}),this.renderControl(t,"Decay (s)",this.currentSound.decay,0,1,.01,n=>{this.currentSound.decay=n,this.onUpdate(this.currentSound)}),e.appendChild(t)}renderModulationGroup(e){const t=this.createControlGroup("Modulation");this.renderControl(t,"Amount",this.currentSound.modulation,0,100,1,n=>{this.currentSound.modulation=n,this.onUpdate(this.currentSound)}),this.renderControl(t,"Speed (Hz)",this.currentSound.modSpeed,0,50,1,n=>{this.currentSound.modSpeed=n,this.onUpdate(this.currentSound)}),e.appendChild(t)}renderFilterGroup(e){const t=this.createControlGroup("Filter");this.renderFilterTypeSelect(t),this.renderControl(t,"Frequency (Hz)",this.currentSound.filter.frequency,20,2e4,1,n=>{this.currentSound.filter.frequency=n,this.onUpdate(this.currentSound)}),this.renderControl(t,"Q",this.currentSound.filter.Q,0,10,.1,n=>{this.currentSound.filter.Q=n,this.onUpdate(this.currentSound)}),e.appendChild(t)}createControlGroup(e){const t=document.createElement("div");t.className="control-group";const n=document.createElement("h3");return n.textContent=e,t.appendChild(n),t}renderTypeSelect(e){const t=document.createElement("div");t.className="control";const n=document.createElement("label");n.textContent="Type";const s=document.createElement("select");s.className="type",["sine","square","sawtooth","triangle"].forEach(i=>{const c=document.createElement("option");c.value=i,c.textContent=i.charAt(0).toUpperCase()+i.slice(1),c.selected=i===this.currentSound.type,s.appendChild(c)}),s.addEventListener("change",()=>{this.currentSound.type=s.value,this.onUpdate(this.currentSound)}),t.appendChild(n),t.appendChild(s),e.appendChild(t)}renderFilterTypeSelect(e){const t=document.createElement("div");t.className="control";const n=document.createElement("label");n.textContent="Type";const s=document.createElement("select");s.className="filter-type",["lowpass","highpass","bandpass"].forEach(i=>{const c=document.createElement("option");c.value=i,c.textContent=i.charAt(0).toUpperCase()+i.slice(1),c.selected=i===this.currentSound.filter.type,s.appendChild(c)}),s.addEventListener("change",()=>{this.currentSound.filter.type=s.value,this.onUpdate(this.currentSound)}),t.appendChild(n),t.appendChild(s),e.appendChild(t)}renderControl(e,t,n,s,o,i,c){const h=document.createElement("div");h.className="control";const u=document.createElement("label");u.textContent=t;const l=document.createElement("input");l.type="range",l.min=String(s),l.max=String(o),l.step=String(i),l.value=String(n);const d=new $(h,n,s,o,i,p=>{l.value=String(p),c(p)});l.addEventListener("input",()=>{const p=Number(l.value);d.update(p),c(p)}),h.appendChild(u),h.appendChild(l),e.appendChild(h)}}class G{constructor(e,t,n){r(this,"container");r(this,"engine");r(this,"store");r(this,"mappings",[]);r(this,"isEditMode",!1);r(this,"defaultKeys",["w","e","r","s","d","f","x","c","v"]);this.container=e,this.engine=t,this.store=n,this.mappings=Array(9).fill(null).map((s,o)=>({key:this.defaultKeys[o],soundId:null})),this.loadMappings(),this.render(),this.setupKeyListeners()}loadMappings(){const e=localStorage.getItem("drumPadMappings");if(e){const t=JSON.parse(e);this.mappings=t.map((n,s)=>({key:n.key||this.defaultKeys[s],soundId:n.soundId}))}}saveMappings(){localStorage.setItem("drumPadMappings",JSON.stringify(this.mappings))}render(){this.container.innerHTML=`
      <div class="drum-pad-header">
        <div class="drum-pad-controls">
          <button class="toggle-mode">${this.isEditMode?"✓":"✎"}</button>
          <button class="toggle-fullscreen">⛶</button>
        </div>
      </div>
      <div class="drum-pad-grid"></div>
    `;const e=this.container.querySelector(".drum-pad-grid");e.innerHTML="",this.mappings.forEach((s,o)=>{const i=document.createElement("div");if(i.className=`drum-pad-button ${this.isEditMode?"edit-mode":""}`,i.dataset.index=String(o),this.setupDragAndDrop(i,o),this.isEditMode){const c=s.soundId?this.store.getSound(s.soundId):null;i.innerHTML=`
          <div class="pad-edit-layout">
            <div class="sound-select">
              <select class="sound-picker">
                <option value="">Select Sound</option>
                ${this.store.getAllSounds().map(l=>`
                  <option value="${l.id}" ${s.soundId===l.id?"selected":""}>
                    ${l.name}
                  </option>
                `).join("")}
              </select>
            </div>
            <button class="key-assign ${s.key?"has-key":""}">
              ${s.key||"Click to assign key"}
            </button>
          </div>
        `;const h=i.querySelector(".sound-picker");if(h&&(h.onclick=l=>l.stopPropagation(),h.onchange=l=>{l.stopPropagation();const d=l.target;this.mappings[o].soundId=d.value||null,this.saveMappings(),this.render()}),c){const l=i.querySelector(".edit-sound");l==null||l.addEventListener("click",p=>{var g;p.stopPropagation(),(g=this.store.getSound(s.soundId))!=null&&g.id&&document.dispatchEvent(new CustomEvent("select-sound",{detail:{soundId:s.soundId}}))});const d=i.querySelector(".play-sound");d==null||d.addEventListener("click",p=>{p.stopPropagation(),c&&this.engine.playSound(c)})}const u=i.querySelector(".key-assign");u.addEventListener("click",l=>{l.stopPropagation();const d=u.textContent;u.textContent="Press any key...",u.classList.add("listening");const p=g=>{if(g.preventDefault(),u.classList.remove("listening"),["Escape","Tab","CapsLock","Shift","Control","Alt","Meta"].includes(g.key)){u.textContent=d,u.classList.remove("listening"),document.removeEventListener("keydown",p);return}const f=this.mappings.find(x=>x.key===g.key);if(f){if(!confirm(`Key "${g.key}" is already assigned. Reassign it?`)){u.textContent=d,u.classList.remove("listening"),document.removeEventListener("keydown",p);return}f.key=""}this.mappings[o].key=g.key,this.saveMappings(),this.render()};document.removeEventListener("keydown",p),document.addEventListener("keydown",p,{once:!0})})}else i.innerHTML=`
          <div class="key-label">${s.key||"..."}</div>
          <div class="sound-label">${this.getSoundName(s.soundId)||"No sound"}</div>
        `,i.addEventListener("click",()=>this.playPadSound(o));e.appendChild(i)});const t=this.container.querySelector(".toggle-mode");t==null||t.addEventListener("click",()=>{this.isEditMode=!this.isEditMode,this.render()});const n=this.container.querySelector(".toggle-fullscreen");n==null||n.addEventListener("click",()=>{this.container.classList.toggle("fullscreen")})}getSoundName(e){if(!e)return"";const t=this.store.getSound(e);return t?t.name:""}playPadSound(e){const t=this.mappings[e];if(t!=null&&t.soundId){const n=this.store.getSound(t.soundId);if(n){this.engine.playSound(n);const s=this.container.querySelectorAll(".drum-pad-button")[e];s.classList.add("active"),setTimeout(()=>s.classList.remove("active"),100)}}}setupKeyListeners(){document.addEventListener("keydown",e=>{var n;if(this.isEditMode||((n=document.activeElement)==null?void 0:n.tagName)==="INPUT")return;const t=this.mappings.find(s=>s.key===e.key);if(t!=null&&t.soundId){const s=this.mappings.indexOf(t);this.playPadSound(s);const o=this.container.querySelector(`[data-index="${s}"]`);o&&(o.classList.add("active"),setTimeout(()=>o.classList.remove("active"),100))}})}setupDragAndDrop(e,t){e.addEventListener("dragover",n=>{n.preventDefault(),e.classList.add("drag-over")}),e.addEventListener("dragleave",()=>{e.classList.remove("drag-over")}),e.addEventListener("drop",n=>{var s;n.preventDefault(),e.classList.remove("drag-over");try{const o=JSON.parse(((s=n.dataTransfer)==null?void 0:s.getData("application/json"))||"");if(o.type==="sound"){const i=this.mappings[t].key;this.mappings[t]={key:i,soundId:o.soundId},this.saveMappings(),this.render()}}catch{console.error("Invalid drag data")}})}}class z{constructor(e){r(this,"container");r(this,"engine");r(this,"store");r(this,"list");r(this,"controls");r(this,"grid");r(this,"currentSound",null);this.container=e,this.engine=new I,this.store=new P,this.createInterface(),this.list=new F(this.container.querySelector(".sound-list"),this.store,{onSelect:s=>this.handleSoundSelect(s),onDelete:s=>this.handleSoundDelete(s),onCreate:()=>this.handleSoundCreate(),onPlay:s=>this.handleSoundPlay(s),onClone:(s,o)=>this.handleSoundClone(s,o),onUpdate:s=>this.handleSoundUpdate(s),onReorder:(s,o)=>this.handleSoundReorder(s,o),onExportConfig:()=>this.exportSoundConfig(),onImportConfig:s=>this.importSoundConfig(s)}),this.controls=new j(this.container.querySelector(".sound-controls"),s=>this.handleSoundUpdate(s)),this.grid=new D(this.container.querySelector(".sound-grid"),8,s=>this.handleSoundUpdate(s));const t=this.container.querySelector(".drum-pad");new G(t,this.engine,this.store);const n=this.store.getAllSounds()[0];n&&this.handleSoundSelect(n),document.addEventListener("click",()=>{this.engine.ensureContext()},{once:!0})}createInterface(){var o,i,c,h,u;this.container.innerHTML=`
      <div class="designer">
        <div class="left-column">
          <div class="sound-list-panel">
            <div class="sound-list"></div>
          </div>
          <div class="sound-controls-panel">
            <div class="sound-controls"></div>
          </div>
          <div class="action-bar">
            <button class="play">▶ Play</button>
            <button class="export-wav">⬇ Export WAV</button>
          </div>
        </div>
        <div class="right-column">
          <div class="drum-pad"></div>
        </div>
      </div>
    `;const e=this.container.querySelector(".designer"),t=this.container.querySelector(".drum-pad");(o=t.querySelector(".toggle-fullscreen"))==null||o.addEventListener("click",()=>{t.classList.toggle("fullscreen"),e.classList.toggle("fullscreen")});const n=this.container.querySelector(".action-bar");(i=n.querySelector(".play"))==null||i.addEventListener("click",()=>{this.currentSound&&this.engine.playSound(this.currentSound)}),(c=n.querySelector(".export-wav"))==null||c.addEventListener("click",async()=>{if(this.currentSound){const l=await this.engine.exportSound(this.currentSound),d=URL.createObjectURL(l),p=document.createElement("a");p.href=d,p.download=`${this.currentSound.name}.wav`,p.click(),URL.revokeObjectURL(d)}}),(h=n.querySelector(".export-config"))==null||h.addEventListener("click",()=>{this.exportSoundConfig()});const s=document.createElement("input");s.type="file",s.accept=".json",s.style.display="none",n.appendChild(s),(u=n.querySelector(".import-config"))==null||u.addEventListener("click",()=>{s.click()}),s.addEventListener("change",l=>{var p;const d=(p=l.target.files)==null?void 0:p[0];d&&this.importSoundConfig(d),s.value=""})}handleSoundUpdate(e){this.store.updateSound(e),this.currentSound=e,this.updateInterface()}handleSoundSelect(e){this.currentSound=e,this.updateInterface()}handleSoundDelete(e){var t;this.store.deleteSound(e),((t=this.currentSound)==null?void 0:t.id)===e&&(this.currentSound=null),this.updateInterface()}handleSoundClone(e,t){this.currentSound=this.store.cloneSound(e,t),this.updateInterface()}handleSoundPlay(e){this.engine.playSound(e)}updateInterface(){this.controls.updateSound(this.currentSound),this.list.updateList(this.store.getAllSounds(),this.currentSound)}handleSoundCreate(){const e=new Date().toLocaleTimeString(),t=this.store.createSound(`Sound ${e}`);this.currentSound=t,this.updateInterface(),setTimeout(()=>{const n=this.container.querySelectorAll(".sound-item"),s=n[n.length-1];if(s){const o=s.querySelector(".sound-name");o&&o.dispatchEvent(new MouseEvent("dblclick"))}},0)}handleSoundReorder(e,t){this.store.reorderSounds(e,t),this.updateInterface()}async exportSoundConfig(){const e={version:"1.0",sounds:this.store.getAllSounds(),drumPadMappings:JSON.parse(localStorage.getItem("drumPadMappings")||"[]")},t=new Blob([JSON.stringify(e,null,2)],{type:"application/json"}),n=URL.createObjectURL(t),s=document.createElement("a");s.href=n,s.download="sound-config.json",s.click(),URL.revokeObjectURL(n)}async importSoundConfig(e){try{const t=await e.text(),n=JSON.parse(t);if(!this.isValidConfig(n))throw new Error("Invalid config file format");this.store.clearAll(),localStorage.removeItem("drumPadMappings"),n.sounds.forEach(o=>{this.store.importSound(o)}),n.drumPadMappings&&localStorage.setItem("drumPadMappings",JSON.stringify(n.drumPadMappings));const s=this.store.getAllSounds()[0];s?this.handleSoundSelect(s):(this.currentSound=null,this.updateInterface())}catch(t){alert(`Error importing config: ${t.message}`)}}isValidConfig(e){return!e||typeof e!="object"||!Array.isArray(e.sounds)||!e.version||e.version!=="1.0"?!1:e.sounds.every(t=>t&&typeof t=="object"&&typeof t.id=="string"&&typeof t.name=="string"&&typeof t.frequency=="number"&&typeof t.duration=="number"&&typeof t.attack=="number"&&typeof t.decay=="number"&&typeof t.modulation=="number"&&typeof t.modSpeed=="number"&&t.filter&&typeof t.filter=="object")}}const H=document.querySelector("#app");new z(H);
