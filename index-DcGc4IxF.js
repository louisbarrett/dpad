var x=Object.defineProperty;var w=(d,e,t)=>e in d?x(d,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):d[e]=t;var r=(d,e,t)=>w(d,typeof e!="symbol"?e+"":e,t);(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))n(s);new MutationObserver(s=>{for(const i of s)if(i.type==="childList")for(const o of i.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&n(o)}).observe(document,{childList:!0,subtree:!0});function t(s){const i={};return s.integrity&&(i.integrity=s.integrity),s.referrerPolicy&&(i.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?i.credentials="include":s.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function n(s){if(s.ep)return;s.ep=!0;const i=t(s);fetch(s.href,i)}})();const T=window.AudioContext||window.webkitAudioContext;class q{constructor(){r(this,"context");r(this,"oscillator",null);r(this,"gainNode",null);r(this,"filter",null);this.context=new(window.AudioContext||window.webkitAudioContext),this.context.suspend()}ensureContext(){this.context.state==="suspended"&&this.context.resume()}async playSound(e){if(this.ensureContext(),this.stopSound(),this.oscillator=this.context.createOscillator(),this.filter=this.context.createBiquadFilter(),this.gainNode=this.context.createGain(),this.oscillator.type=e.type,this.oscillator.frequency.setValueAtTime(e.frequency,this.context.currentTime),this.filter.type=e.filter.type,this.filter.frequency.setValueAtTime(e.filter.frequency,this.context.currentTime),this.filter.Q.setValueAtTime(e.filter.Q,this.context.currentTime),e.modulation>0){const t=this.context.createOscillator(),n=this.context.createGain();t.frequency.value=e.modSpeed,n.gain.value=e.modulation,t.connect(n),n.connect(this.oscillator.frequency),t.start()}return this.gainNode.gain.setValueAtTime(0,this.context.currentTime),this.gainNode.gain.linearRampToValueAtTime(1,this.context.currentTime+e.attack),this.gainNode.gain.exponentialRampToValueAtTime(.001,this.context.currentTime+e.duration),this.oscillator.connect(this.filter),this.filter.connect(this.gainNode),this.gainNode.connect(this.context.destination),this.oscillator.start(),this.oscillator.stop(this.context.currentTime+e.duration),new Promise(t=>{setTimeout(t,e.duration*1e3)})}stopSound(){var e;(e=this.oscillator)==null||e.stop(),this.oscillator=null,this.filter=null,this.gainNode=null}async exportSound(e){const t=this.context.sampleRate,n=e.duration;new OfflineAudioContext(2,t*n,t);const s=new T,i=s.createOscillator(),o=s.createBiquadFilter(),a=s.createGain();if(i.type=e.type,i.frequency.setValueAtTime(e.frequency,0),o.type=e.filter.type,o.frequency.setValueAtTime(e.filter.frequency,0),o.Q.setValueAtTime(e.filter.Q,0),e.modulation>0){const l=s.createOscillator(),p=s.createGain();l.frequency.value=e.modSpeed,p.gain.value=e.modulation,l.connect(p),p.connect(i.frequency),l.start()}a.gain.setValueAtTime(0,0),a.gain.linearRampToValueAtTime(1,e.attack),a.gain.exponentialRampToValueAtTime(.001,e.duration),i.connect(o),o.connect(a),a.connect(s.destination);const c=s.createMediaStreamDestination();a.connect(c);const u=new MediaRecorder(c.stream),h=[];return u.ondataavailable=l=>h.push(l.data),i.start(),u.start(),new Promise(l=>{u.onstop=()=>{const p=new Blob(h,{type:"audio/wav"});s.close(),l(p)},setTimeout(()=>{u.stop(),i.stop()},n*1e3)})}audioBufferToWav(e){const t=e.numberOfChannels,n=e.sampleRate,s=1,i=16,o=i/8,a=t*o,c=e.getChannelData(0),u=new Int16Array(c.length);for(let p=0;p<c.length;p++){const m=Math.max(-1,Math.min(1,c[p]));u[p]=m<0?m*32768:m*32767}const h=new ArrayBuffer(44),l=new DataView(h);return y(l,0,"RIFF"),l.setUint32(4,36+u.length*2,!0),y(l,8,"WAVE"),y(l,12,"fmt "),l.setUint32(16,16,!0),l.setUint16(20,s,!0),l.setUint16(22,t,!0),l.setUint32(24,n,!0),l.setUint32(28,n*a,!0),l.setUint16(32,a,!0),l.setUint16(34,i,!0),y(l,36,"data"),l.setUint32(40,u.length*2,!0),new Blob([h,u.buffer],{type:"audio/wav"})}}function y(d,e,t){for(let n=0;n<t.length;n++)d.setUint8(e+n,t.charCodeAt(n))}let f;const k=new Uint8Array(16);function U(){if(!f&&(f=typeof crypto<"u"&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!f))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return f(k)}const g=[];for(let d=0;d<256;++d)g.push((d+256).toString(16).slice(1));function M(d,e=0){return g[d[e+0]]+g[d[e+1]]+g[d[e+2]]+g[d[e+3]]+"-"+g[d[e+4]]+g[d[e+5]]+"-"+g[d[e+6]]+g[d[e+7]]+"-"+g[d[e+8]]+g[d[e+9]]+"-"+g[d[e+10]]+g[d[e+11]]+g[d[e+12]]+g[d[e+13]]+g[d[e+14]]+g[d[e+15]]}const I=typeof crypto<"u"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto),L={randomUUID:I};function E(d,e,t){if(L.randomUUID&&!e&&!d)return L.randomUUID();d=d||{};const n=d.random||(d.rng||U)();return n[6]=n[6]&15|64,n[8]=n[8]&63|128,M(n)}class N{constructor(){r(this,"sounds",new Map);r(this,"order",[]);this.loadFromLocalStorage()}loadFromLocalStorage(){const e=localStorage.getItem("sounds"),t=localStorage.getItem("soundOrder");if(e){const n=JSON.parse(e);this.sounds=new Map(Object.entries(n)),t?this.order=JSON.parse(t):this.order=Array.from(this.sounds.keys())}}saveToLocalStorage(){const e=Object.fromEntries(this.sounds);localStorage.setItem("sounds",JSON.stringify(e)),localStorage.setItem("soundOrder",JSON.stringify(this.order))}createSound(e){const t={id:E(),name:e,type:"sine",frequency:440,duration:.5,attack:.01,decay:.1,modulation:0,modSpeed:0,filter:{type:"lowpass",frequency:1e3,Q:1}};return this.sounds.set(t.id,t),this.order.push(t.id),this.saveToLocalStorage(),t}cloneSound(e,t){const n=this.sounds.get(e);if(!n)throw new Error("Sound not found");const s={...n,id:E(),name:t};return this.sounds.set(s.id,s),this.order.push(s.id),this.saveToLocalStorage(),s}updateSound(e){this.sounds.set(e.id,e),this.saveToLocalStorage()}deleteSound(e){this.sounds.delete(e),this.order=this.order.filter(t=>t!==e),this.saveToLocalStorage()}reorderSounds(e,t){const[n]=this.order.splice(e,1);this.order.splice(t,0,n),this.saveToLocalStorage()}getAllSounds(){return this.order.map(e=>this.sounds.get(e))}getSound(e){return this.sounds.get(e)}}class S{static yToFreq(e,t){const s=(t-e)/12;return 20*Math.pow(2,s)}static freqToY(e,t){return t-12*Math.log2(e/20)}static snapToNote(e){const n=12*Math.log2(e/440)+69,s=Math.round(n);return 440*Math.pow(2,(s-69)/12)}static xToTime(e,t){return(e+1)/t*2}static getNoteFrequency(e){return 440*Math.pow(2,(e-69)/12)}}class A{constructor(e,t,n,s,i){r(this,"element");r(this,"x");r(this,"y");r(this,"gridSize");r(this,"sound");r(this,"onUpdate");this.x=e,this.y=t,this.gridSize=n,this.sound=s,this.onUpdate=i,this.element=this.createCell()}createCell(){const e=document.createElement("div");e.className="grid-cell";const t=S.yToFreq(this.y,this.gridSize),n=S.xToTime(this.x,this.gridSize);return e.style.backgroundColor=this.getCellColor(t,n),e.addEventListener("mousedown",()=>this.handleCellClick(t,n)),e}getCellColor(e,t){const n=Math.abs(this.sound.frequency/e),s=n>.99&&n<1.01,i=Math.abs(this.sound.duration-t)<.1;return s&&i?"#00ffff":s?"rgba(0, 255, 255, 0.2)":i?"rgba(0, 255, 255, 0.1)":"#2a2a2a"}handleCellClick(e,t){this.sound.frequency=e,this.sound.duration=t,this.onUpdate(this.sound)}getElement(){return this.element}update(e){this.sound=e;const t=S.yToFreq(this.y,this.gridSize),n=S.xToTime(this.x,this.gridSize);this.element.style.backgroundColor=this.getCellColor(t,n)}}class P{constructor(e,t,n){r(this,"container");r(this,"gridSize");r(this,"cells",[]);r(this,"currentSound",null);r(this,"onSoundUpdate");this.container=e,this.gridSize=t,this.onSoundUpdate=n}updateSound(e){this.currentSound=e,this.render()}render(){if(this.container.innerHTML="",this.cells=[],!this.currentSound){this.container.innerHTML='<div class="no-sound">Select or create a sound</div>';return}for(let e=0;e<this.gridSize;e++){this.cells[e]=[];for(let t=0;t<this.gridSize;t++){const n=new A(t,e,this.gridSize,this.currentSound,this.onSoundUpdate);this.cells[e][t]=n,this.container.appendChild(n.getElement())}}}updateGrid(){var e;if(this.currentSound)for(let t=0;t<this.gridSize;t++)for(let n=0;n<this.gridSize;n++)(e=this.cells[t][n])==null||e.update(this.currentSound)}}class V{constructor(e,t,n){r(this,"span");r(this,"sound");r(this,"onUpdate");this.span=e,this.sound=t,this.onUpdate=n,this.initialize()}initialize(){this.span.addEventListener("dblclick",()=>{const e=document.createElement("input");e.type="text",e.value=this.sound.name,e.className="name-edit";const t=()=>{const n=e.value.trim();n&&(this.sound.name=n,this.onUpdate(this.sound)),this.span.textContent=this.sound.name};e.addEventListener("blur",t),e.addEventListener("keyup",n=>{n.key==="Enter"?t():n.key==="Escape"&&(this.span.textContent=this.sound.name)}),this.span.textContent="",this.span.appendChild(e),e.focus(),e.select()})}}class R{constructor(e,{onSelect:t,onDelete:n,onCreate:s,onPlay:i,onClone:o,onUpdate:a,onReorder:c}){r(this,"container");r(this,"onSelect");r(this,"onDelete");r(this,"onCreate");r(this,"onPlay");r(this,"onClone");r(this,"onUpdate");r(this,"onReorder");r(this,"currentSound",null);r(this,"draggedItem",null);r(this,"draggedIndex",-1);this.container=e,this.onSelect=t,this.onDelete=n,this.onCreate=s,this.onPlay=i,this.onClone=o,this.onUpdate=a,this.onReorder=c,this.initialize()}initialize(){var e;this.container.innerHTML=`
      <div class="list-header">
        <h2>Sounds</h2>
        <button class="new-sound">+</button>
      </div>
      <div class="sound-items"></div>
    `,(e=this.container.querySelector(".new-sound"))==null||e.addEventListener("click",()=>{this.onCreate()})}updateList(e,t){this.currentSound=t;const n=this.container.querySelector(".sound-items");n.innerHTML="",e.forEach((s,i)=>{var c,u,h,l,p;const o=document.createElement("div");o.className="sound-item",o.draggable=!0,((c=this.currentSound)==null?void 0:c.id)===s.id&&o.classList.add("selected"),o.innerHTML=`
        <span class="drag-handle">⋮⋮</span>
        <span class="sound-name">${s.name}</span>
        <button class="edit" title="Edit name">✎</button>
        <button class="play" title="Play">▶</button>
        <button class="clone" title="Clone">⎘</button>
        <button class="delete" title="Delete">×</button>
      `;const a=o.querySelector(".sound-name");new V(a,s,this.onUpdate),this.setupDragListeners(o,i),o.addEventListener("click",()=>this.onSelect(s)),(u=o.querySelector(".edit"))==null||u.addEventListener("click",m=>{m.stopPropagation(),a.dispatchEvent(new MouseEvent("dblclick"))}),(h=o.querySelector(".play"))==null||h.addEventListener("click",m=>{m.stopPropagation(),this.onPlay(s)}),(l=o.querySelector(".clone"))==null||l.addEventListener("click",m=>{m.stopPropagation();const v=prompt("Enter name for cloned sound:",`${s.name} (copy)`);v&&this.onClone(s.id,v)}),(p=o.querySelector(".delete"))==null||p.addEventListener("click",m=>{m.stopPropagation(),confirm("Are you sure you want to delete this sound?")&&this.onDelete(s.id)}),n.appendChild(o)})}setupDragListeners(e,t){e.addEventListener("dragstart",n=>{var s;this.draggedItem=e,this.draggedIndex=t,e.classList.add("dragging"),(s=n.dataTransfer)==null||s.setData("text/plain","")}),e.addEventListener("dragend",()=>{this.draggedItem&&(this.draggedItem.classList.remove("dragging"),this.draggedItem=null,this.draggedIndex=-1)}),e.addEventListener("dragover",n=>{if(n.preventDefault(),!this.draggedItem||this.draggedItem===e)return;const s=e.getBoundingClientRect(),i=s.top+s.height/2;n.clientY<i?(e.classList.add("drag-above"),e.classList.remove("drag-below")):(e.classList.add("drag-below"),e.classList.remove("drag-above"))}),e.addEventListener("dragleave",()=>{e.classList.remove("drag-above","drag-below")}),e.addEventListener("drop",n=>{if(n.preventDefault(),!this.draggedItem||this.draggedItem===e)return;const s=e.getBoundingClientRect(),i=s.top+s.height/2,o=n.clientY,a=t+(o>=i?1:0),c=a>this.draggedIndex?a-1:a;this.onReorder(this.draggedIndex,c),e.classList.remove("drag-above","drag-below")})}}class O{constructor(e,t,n,s,i,o){r(this,"element");r(this,"input");r(this,"currentValue");r(this,"min");r(this,"max");r(this,"step");r(this,"onChange");this.currentValue=t,this.min=n,this.max=s,this.step=i,this.onChange=o,this.element=document.createElement("span"),this.element.className="value editable",this.element.textContent=this.formatValue(t),this.input=document.createElement("input"),this.input.type="number",this.input.className="value-edit",this.input.min=String(n),this.input.max=String(s),this.input.step=String(i),e.appendChild(this.element),this.setupListeners()}formatValue(e){return this.step>=1?e.toFixed(0):e.toFixed(2)}setupListeners(){this.element.addEventListener("click",()=>{this.input.value=String(this.currentValue),this.element.replaceWith(this.input),this.input.focus(),this.input.select()}),this.input.addEventListener("blur",()=>this.commitEdit()),this.input.addEventListener("keydown",e=>{e.key==="Enter"?this.commitEdit():e.key==="Escape"&&this.input.replaceWith(this.element)})}commitEdit(){const e=Math.min(this.max,Math.max(this.min,Number(this.input.value)));!isNaN(e)&&e!==this.currentValue&&(this.currentValue=e,this.onChange(e)),this.element.textContent=this.formatValue(this.currentValue),this.input.replaceWith(this.element)}update(e){this.currentValue=e,this.element.textContent=this.formatValue(e)}}class D{constructor(e,t){r(this,"container");r(this,"onUpdate");r(this,"currentSound",null);this.container=e,this.onUpdate=t,this.render()}updateSound(e){this.currentSound=e,this.render()}render(){if(!this.container)return;if(!this.currentSound){this.container.innerHTML='<div class="no-sound">Select or create a sound</div>';return}const e=document.createElement("div");e.className="controls-grid",this.renderOscillatorGroup(e),this.renderEnvelopeGroup(e),this.renderModulationGroup(e),this.renderFilterGroup(e),this.container.innerHTML="",this.container.appendChild(e)}renderOscillatorGroup(e){const t=this.createControlGroup("Oscillator");this.renderTypeSelect(t),this.renderControl(t,"Frequency (Hz)",this.currentSound.frequency,20,2e4,.01,s=>{this.currentSound.frequency=s,this.onUpdate(this.currentSound)});const n=document.createElement("button");n.className="snap-note",n.textContent="♪ Snap to Note",n.addEventListener("click",()=>{this.currentSound&&(this.currentSound.frequency=S.snapToNote(this.currentSound.frequency),this.onUpdate(this.currentSound))}),t.appendChild(n),e.appendChild(t)}renderEnvelopeGroup(e){const t=this.createControlGroup("Envelope");this.renderControl(t,"Duration (s)",this.currentSound.duration,.1,2,.1,n=>{this.currentSound.duration=n,this.onUpdate(this.currentSound)}),this.renderControl(t,"Attack (s)",this.currentSound.attack,0,.5,.01,n=>{this.currentSound.attack=n,this.onUpdate(this.currentSound)}),this.renderControl(t,"Decay (s)",this.currentSound.decay,0,1,.01,n=>{this.currentSound.decay=n,this.onUpdate(this.currentSound)}),e.appendChild(t)}renderModulationGroup(e){const t=this.createControlGroup("Modulation");this.renderControl(t,"Amount",this.currentSound.modulation,0,100,1,n=>{this.currentSound.modulation=n,this.onUpdate(this.currentSound)}),this.renderControl(t,"Speed (Hz)",this.currentSound.modSpeed,0,50,1,n=>{this.currentSound.modSpeed=n,this.onUpdate(this.currentSound)}),e.appendChild(t)}renderFilterGroup(e){const t=this.createControlGroup("Filter");this.renderFilterTypeSelect(t),this.renderControl(t,"Frequency (Hz)",this.currentSound.filter.frequency,20,2e4,1,n=>{this.currentSound.filter.frequency=n,this.onUpdate(this.currentSound)}),this.renderControl(t,"Q",this.currentSound.filter.Q,0,10,.1,n=>{this.currentSound.filter.Q=n,this.onUpdate(this.currentSound)}),e.appendChild(t)}createControlGroup(e){const t=document.createElement("div");t.className="control-group";const n=document.createElement("h3");return n.textContent=e,t.appendChild(n),t}renderTypeSelect(e){const t=document.createElement("div");t.className="control";const n=document.createElement("label");n.textContent="Type";const s=document.createElement("select");s.className="type",["sine","square","sawtooth","triangle"].forEach(o=>{const a=document.createElement("option");a.value=o,a.textContent=o.charAt(0).toUpperCase()+o.slice(1),a.selected=o===this.currentSound.type,s.appendChild(a)}),s.addEventListener("change",()=>{this.currentSound.type=s.value,this.onUpdate(this.currentSound)}),t.appendChild(n),t.appendChild(s),e.appendChild(t)}renderFilterTypeSelect(e){const t=document.createElement("div");t.className="control";const n=document.createElement("label");n.textContent="Type";const s=document.createElement("select");s.className="filter-type",["lowpass","highpass","bandpass"].forEach(o=>{const a=document.createElement("option");a.value=o,a.textContent=o.charAt(0).toUpperCase()+o.slice(1),a.selected=o===this.currentSound.filter.type,s.appendChild(a)}),s.addEventListener("change",()=>{this.currentSound.filter.type=s.value,this.onUpdate(this.currentSound)}),t.appendChild(n),t.appendChild(s),e.appendChild(t)}renderControl(e,t,n,s,i,o,a){const c=document.createElement("div");c.className="control";const u=document.createElement("label");u.textContent=t;const h=document.createElement("input");h.type="range",h.min=String(s),h.max=String(i),h.step=String(o),h.value=String(n);const l=new O(c,n,s,i,o,p=>{h.value=String(p),a(p)});h.addEventListener("input",()=>{const p=Number(h.value);l.update(p),a(p)}),c.appendChild(u),c.appendChild(h),e.appendChild(c)}}class F{constructor(e,t,n){r(this,"container");r(this,"engine");r(this,"store");r(this,"mappings",[]);r(this,"isEditMode",!1);r(this,"selectedPad",null);this.container=e,this.engine=t,this.store=n,this.mappings=Array(9).fill(null).map(()=>({key:"",soundId:null})),this.loadMappings(),this.render(),this.setupKeyListeners()}loadMappings(){const e=localStorage.getItem("drumPadMappings");e&&(this.mappings=JSON.parse(e))}saveMappings(){localStorage.setItem("drumPadMappings",JSON.stringify(this.mappings))}render(){this.container.innerHTML=`
      <div class="drum-pad-header">
        <div class="drum-pad-controls">
          <button class="toggle-mode">${this.isEditMode?"✓":"✎"}</button>
          <button class="toggle-fullscreen">⛶</button>
        </div>
      </div>
      <div class="drum-pad-grid"></div>
    `;const e=this.container.querySelector(".drum-pad-grid");e.innerHTML="",this.mappings.forEach((s,i)=>{const o=document.createElement("div");if(o.className=`drum-pad-button ${this.isEditMode?"edit-mode":""}`,o.dataset.index=String(i),this.isEditMode){o.innerHTML=`
          <div class="pad-edit-layout">
            <div class="sound-select">
              <select class="sound-picker">
                <option value="">Select Sound</option>
                ${this.store.getAllSounds().map(u=>`
                  <option value="${u.id}" ${s.soundId===u.id?"selected":""}>
                    ${u.name}
                  </option>
                `).join("")}
              </select>
            </div>
            <button class="key-assign ${s.key?"has-key":""}">
              ${s.key||"Click to assign key"}
            </button>
          </div>
        `;const a=o.querySelector(".sound-picker");a.addEventListener("click",u=>{u.stopPropagation()}),a.addEventListener("change",u=>{u.stopPropagation();const h=u.target;this.mappings[i].soundId=h.value||null,this.saveMappings()});const c=o.querySelector(".key-assign");c.addEventListener("click",u=>{u.stopPropagation();const h=c.textContent;c.textContent="Press any key...",c.classList.add("listening");const l=m=>{if(m.preventDefault(),m.stopPropagation(),["Escape","Tab","CapsLock","Shift","Control","Alt","Meta"].includes(m.key)){c.textContent=h,c.classList.remove("listening"),document.removeEventListener("keydown",l);return}const C=this.mappings.find(b=>b.key===m.key);if(C){if(!confirm(`Key "${m.key}" is already assigned. Reassign it?`)){c.textContent=h,c.classList.remove("listening"),document.removeEventListener("keydown",l);return}C.key=""}this.mappings[i].key=m.key,this.saveMappings(),this.render()};document.removeEventListener("keydown",l),document.addEventListener("keydown",l,{once:!0});const p=m=>{m.key==="Escape"&&(c.textContent=h,c.classList.remove("listening"),document.removeEventListener("keydown",l),document.removeEventListener("keydown",p))};document.addEventListener("keydown",p)})}else o.innerHTML=`
          <div class="key-label">${s.key||"..."}</div>
          <div class="sound-label">${this.getSoundName(s.soundId)||"No sound"}</div>
        `,o.addEventListener("click",()=>this.playPadSound(i));e.appendChild(o)});const t=this.container.querySelector(".toggle-mode");t==null||t.addEventListener("click",()=>{this.isEditMode=!this.isEditMode,this.render()});const n=this.container.querySelector(".toggle-fullscreen");n==null||n.addEventListener("click",()=>{this.container.classList.toggle("fullscreen")})}getSoundName(e){if(!e)return"";const t=this.store.getSound(e);return t?t.name:""}playPadSound(e){const t=this.mappings[e];if(t!=null&&t.soundId){const n=this.store.getSound(t.soundId);if(n){this.engine.playSound(n);const s=this.container.querySelectorAll(".drum-pad-button")[e];s.classList.add("active"),setTimeout(()=>s.classList.remove("active"),100)}}}setupKeyListeners(){document.addEventListener("keydown",e=>{if(this.isEditMode)return;const t=this.mappings.find(n=>n.key===e.key);if(t!=null&&t.soundId){const n=this.mappings.indexOf(t);this.playPadSound(n);const s=this.container.querySelector(`[data-index="${n}"]`);s&&(s.classList.add("active"),setTimeout(()=>s.classList.remove("active"),100))}})}}class z{constructor(e){r(this,"container");r(this,"engine");r(this,"store");r(this,"list");r(this,"controls");r(this,"grid");r(this,"currentSound",null);this.container=e,this.engine=new q,this.store=new N,this.createInterface(),this.list=new R(this.container.querySelector(".sound-list"),{onSelect:s=>this.handleSoundSelect(s),onDelete:s=>this.handleSoundDelete(s),onCreate:()=>this.handleSoundCreate(),onPlay:s=>this.handleSoundPlay(s),onClone:(s,i)=>this.handleSoundClone(s,i),onUpdate:s=>this.handleSoundUpdate(s),onReorder:(s,i)=>this.handleSoundReorder(s,i)}),this.controls=new D(this.container.querySelector(".sound-controls"),s=>this.handleSoundUpdate(s)),this.grid=new P(this.container.querySelector(".sound-grid"),8,s=>this.handleSoundUpdate(s));const t=this.container.querySelector(".drum-pad");new F(t,this.engine,this.store);const n=this.store.getAllSounds()[0];n&&this.handleSoundSelect(n),document.addEventListener("click",()=>{this.engine.ensureContext()},{once:!0})}createInterface(){var s,i,o;this.container.innerHTML=`
      <div class="designer">
        <div class="left-column">
          <div class="sound-list-panel">
            <div class="sound-list"></div>
          </div>
          <div class="sound-controls-panel">
            <div class="sound-controls"></div>
          </div>
          <div class="action-bar">
            <button class="play">▶ Play</button>
            <button class="export">⬇ Export WAV</button>
          </div>
        </div>
        <div class="right-column">
          <div class="drum-pad"></div>
        </div>
      </div>
    `;const e=this.container.querySelector(".designer"),t=this.container.querySelector(".drum-pad");(s=t.querySelector(".toggle-fullscreen"))==null||s.addEventListener("click",()=>{t.classList.toggle("fullscreen"),e.classList.toggle("fullscreen")});const n=this.container.querySelector(".action-bar");(i=n.querySelector(".play"))==null||i.addEventListener("click",()=>{this.currentSound&&this.engine.playSound(this.currentSound)}),(o=n.querySelector(".export"))==null||o.addEventListener("click",async()=>{if(this.currentSound){const a=await this.engine.exportSound(this.currentSound),c=URL.createObjectURL(a),u=document.createElement("a");u.href=c,u.download=`${this.currentSound.name}.wav`,u.click(),URL.revokeObjectURL(c)}})}handleSoundUpdate(e){this.store.updateSound(e),this.currentSound=e,this.updateInterface()}handleSoundSelect(e){this.currentSound=e,this.updateInterface()}handleSoundDelete(e){var t;this.store.deleteSound(e),((t=this.currentSound)==null?void 0:t.id)===e&&(this.currentSound=null),this.updateInterface()}handleSoundClone(e,t){this.currentSound=this.store.cloneSound(e,t),this.updateInterface()}handleSoundPlay(e){this.engine.playSound(e)}updateInterface(){this.controls.updateSound(this.currentSound),this.list.updateList(this.store.getAllSounds(),this.currentSound)}handleSoundCreate(){const e=new Date().toLocaleTimeString(),t=this.store.createSound(`Sound ${e}`);this.currentSound=t,this.updateInterface(),setTimeout(()=>{const n=this.container.querySelectorAll(".sound-item"),s=n[n.length-1];if(s){const i=s.querySelector(".sound-name");i&&i.dispatchEvent(new MouseEvent("dblclick"))}},0)}handleSoundReorder(e,t){this.store.reorderSounds(e,t),this.updateInterface()}}const G=document.querySelector("#app");new z(G);
